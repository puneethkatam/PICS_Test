# Properties file for use with PRPC Service Utilities.  Update this file 
# before running the prpcServiceUtils.bat/sh script.
# Set the REST URL and the specific tool's settings.
# For more information, see the Pega 7 Platform help.

# Connection Information
################### COMMON PROPERTIES - REST CONNECTION (REQUIRED) ##################
###################################################################################
# 	pega.rest.server.url=<REST service URL> 
#	pega.rest.username=<username to access REST service>
#	pega.rest.password=<service password>

pega.rest.server.url=http://<host name>:<port number>/<context>/PRRestService/<tenant url hash>
pega.rest.username=puneeth_export
pega.rest.password=rules
pega.rest.proxy.host=
pega.rest.proxy.port=
pega.rest.proxy.username=
pega.rest.proxy.password=
pega.rest.proxy.domain=
pega.rest.proxy.workstation=
# Response type. Accepted values are xml and json.
pega.rest.response.type=json
#If you do not set the user temp directory to a valid directory, the Pega 7 Platform will use the default temp directory.
user.temp.dir=C:/pega_temp

############################### SETTINGS FOR EXPORT TOOL ##########################
###################################################################################

# ARCHIVE NAME (Required unless exporting a branch)
export.archiveName=TestToday
# PRODUCT NAME AND VERSION TO EXPORT
export.productName=INVMGMTFW023099
export.productVersion=02-30-99
#APPLICATION NAME AND VERSION TO EXPORT
export.applicationVersion=
export.applicationName=

#BRANCH NAME TO EXPORT
#Exports branch to file: BranchName_CurrentTimestamp.jar  
export.branchName=
#APPLCATION CONTEXT OF THE BRANCH RULESET TO EXPORT. For example: PegaRULES:07.10
export.branchAppContext=
export.exportToRepository=true
# Name of repository to export^M
export.repositoryName=PDM_JFrogRepositoryTest
# Set export.async=true to execute the export asynchronously. The system queues the job and returns a JobID to use to get the job status.
export.async=true
############################### SETTINGS FOR EXPOSE TOOL ##########################
###################################################################################
# CLASSES TO INCLUDE (REQUIRED):
#	includedClasses:	classes to include, separate classes by commas
#	includeDescendents:	true (include descendents)
expose.includedClasses=
expose.includeDescendents=true
# CLASSES TO EXCLUDE  
# 	excludedClasses:	classes to exclude, separate classes by commas
#	excludeDescendents:	true (exclude descendants)
#	For example, if including classes with descendants (Rule-) you can use this
# 		to filter specific classes
expose.excludedClasses=
expose.excludeDescendents=true
# KEYS AND DATE RANGES :
# Use the following arguments to specify a range of pzInsKey or 
# pxCreateDateTime properties. If you provide both, only the  
# pzInsKey range will be used. 
# Format for date properties is yyyyMMddTHHmmss.SSS
# NOTE: if you provide the pzInsKey range then you may only provide ONE 
#   class with no descendants. Use the classes.included and provide one class). 
#  	startKey	Only instances with a pzInsKey equal to or greater than <start key>
#	endKey		Only instances with a pzInsKey equal to or less than <end key>
#	startDate	Only instances with a pxCreateDateTime equal to or greater than <start date>
#	endDate		Only instances with a pxCreateDateTime equal to or less than <end date>
# NOTE: When dealing with large tables, give the pzInsKey range diligently to return appropriate number of results so that the pre fetch query doesn't lead to allocation errors.
expose.startKey=
expose.endKey=
expose.startDate=
expose.endDate=
# REINDEXING:
# Use the following argument to regenerate indexes 
expose.reindex=true
# Use the following argument to limit scope of rulesets processed.
#	full -- process pega and customer rulesets
#	pega -- process only pega rulesets
#   nonpega -- process only customer rulesets
# For performance reasons, it's usually not necessary to reindex Pega 7 Platform rulesets unless instructed to do so. 
expose.reindexType=nonpega
#  specify how often to commit to the database
expose.commitRate=100
# This parameter is used to run the expose cols process in parallel.If the value was not given system considers 4 threads.
# If the number of threads was given more than (2* number of processors) the system defaults to max (2*number of processors).
# You must have more database connections available than threads specified. If not the system locks or fails depending on	
# how the connection pool max wait for connection parameter is set. 
expose.numOfThreads=1
# Set expose.async=true to execute the expose operation asynchronously. The system queues the job and returns a JobID to use to get the job status.
expose.async=true


############################### SETTINGS FOR IMPORT TOOL ##########################
###################################################################################
# RELATIVE PATH TO ARCHIVE FROM UTILS FOLDER OR FULL PATH  TO ARCHIVE (REQUIRED):
# if the path is a folder then all the zip and jar files under the directory recursively will be considered for import.
import.archive.path="http://svl-jbuild-d1:8091/artifactory/Pega_PDM/branch/TestDevOps4/ExportWizard/"

# Import Pega Archive Options

# Modes
# install  - Do not update existing instances, only import new instances.
#            If an instance already exists, it will not be imported. An exception
#            message will appear in the log for each instance that already exists.
# import   - Update existing instances and remove duplicates.  Handling of existing
#			 instances can be overridden using the import.existing.instances property.
# hotfix   - Update existing instances and remove duplicates if newer timestamp,
#            skip updating the instance (or inserting the duplicate) if the
#            archive's instance timestamp is older.
import.mode=import

# Handling for existing instances
# override - Replace instances that already exist in different RuleSets and/or Versions.
# skip     - Skip the instances that already exist in different RuleSets and/or Versions.
# if unset, the import will fail if existing instances are encountered
import.existingInstances=skip

#  Do not fail on error 
import.nofailonerror=false
#  specify how often to commit to the database 
import.commitRate=100
#  Compile any libraries after import
import.compileLibraries=true
# Allow import even if there are any missing product dependencies. Recommended value is false
import.allowImportWithMissingDependencies=false
#Import archives in the user specified order
import.preserveOrder = true
# Option to be used when importing from repository^M
import.importFromRepository=false
# Name of the repository from which you want to import the archive. repositoryName is case sensitive.^M
import.repositoryName=PDM_JFrogRepositoryTest
# Type of the artifact which you want to import. artifactType is case sensitive. Supported types are application, product, branch, component, rulesetversion. ^M
import.artifactType=
# Path to the archive in the repository. Please provide path including extension. archivePath is case sensitive. Ex: MyApp_01.01.01/ExportWizard/myFile.zip^M
import.archivePath=TestDevOps4/ExportWizard/TestDevOps4_20180925T024336_GMT.jar

# Import Code Archive options
# Specify which CodeSet Name and Version to load the Java .class files to.
import.codesetName=Customer
import.codesetVersion=06-01-01

# Set import.async=true to execute the import asynchronously. The system queues the job and returns a JobID to use to get the job status.
import.async=true

# Set true to bypass creating a restore point and tracking  changes during import. Recommended value is false
import.skipBackup=false

############################### SETTINGS FOR TRACKED DATA ##########################
#valid values are rollback or commit
#setting this property rolls back or commits data that has been imported using 'import data only instances'
manageTrackedData.operation=

############################### SETTINGS FOR HOTFIX MANAGER ##########################
# Valid values are commit, rollback, generateDDL, install, and scan.
# Rollback removes all uncommitted hotfixes from the system.

hotfix.operation=
# If generateDDL or install is chosen, provide a path to a DL file.
hotfix.dlFilePath=
# If scan is chosen, provide a path to a Catalog.zip file.
# Catalog.zip files can be obtained from DL files or downloaded from ftp://catalog:catalog!@pegaftp2.pega.com/hfix/CATALOG/61/CATALOG.ZIP
hotfix.catalogPath=
# Set to true to bypass schema when installing a DL 
hotfix.bypassSchema=false
# Import a DL even if it requires additional configuration
hotfix.force=false
# Set hotix.async=true to execute the hotfix operation asynchronously. The system queues the job and returns a JobID to use to get the job status.
hotfix.async=true

############################### GET STATUS ##########################
# All import, export, expose, hotfix operations, updateAccessGroup and manageTrackedData and all asynchronous rollback operations return a JobID. Use that JobID to get the status of the operation.

#jobID of the operation
getstatus.jobID=
#Valid operation values are import, export, expose, hotfix, rollback, updateAccessGroup and manageTrackedData.
getstatus.operationName=

############################### MANAGE RESTORE POINTS ###############
# NOTE: Restore Point operations only support JSON results
#The action to perform: list, get, create, delete.
# list: List all available restore points.
# get: Display detailed information about a single restore point. 
# create: Create a new restore point.
# delete: Delete an existing restore point.

manageRestorePoints.action=

#The restore point name to use for getting or deleting a restore point.
manageRestorePoints.restorePointName=

#The restore point label to use when creating a new restore point.
manageRestorePoints.restorePointLabel=

############################### ROLLBACK ###########################################
# NOTE: Rollback only supports JSON results
# Initiate Rollback options 
# Rolling back to a restore point restores the state of a deployed application, including all rule and data instances. To roll back hotfixes, use the HOTFIX MANAGER settings.

# name of the restore point to roll back to
rollback.restorePointName=
# action to perform, currently "SystemRollback" is the only supported option
rollback.action=SystemRollback
# Set rollback.async=true to execute the rollback asynchronously. The system queues the job and returns a JobID to use to get the job status. 
rollback.async=true

# Rollback results options

# Flag for whether or not to download the log to the filesystem when returning the result of the rollback
rollback.downloadLogToFile=true

############################### UPDATE ACCESS GROUP ##########################
# List the application name and new version number.
updateAccessGroup.applicationName=
updateAccessGroup.applicationVersion=
# Optional. List the access groups to update. If no access groups are listed, all access groups mapped to the application are updated with the new application version. 
updateAccessGroup.groupList=
